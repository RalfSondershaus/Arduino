# 
# Makefile for rules
#
# batch operator > redirects standard output to a file
# batch operator 2> redirects standard output and error output to a file
#
# To ignore errors in a recipe line, write a �-� at the beginning of the line�s text 
# (after the initial tab). The �-� is discarded before the line is passed to the shell for execution
#
# Remove source file prefixes ./../ in order to make VS find the source files:
# $(SED) s:./../::

# ---------------------------------------------------
# AVR GCC
# ---------------------------------------------------
ifeq ($(ARG_COMPILER),avr_gcc)
$(TARGET_FILENAME_BASE).elf: $(FILES_O)
	@echo +++++ linking $(basename $@).elf +++++
	@$(CC) $(LFLAGS) $(FILES_O) -o $(basename $@).elf

$(TARGET_FILENAME_BASE).hex: $(TARGET_FILENAME_BASE).elf
	@echo +++++ converting $(basename $@).elf into $(basename $@).hex +++++
	@$(OBJCOPY) $(OBJCOPYFLAGS) $(basename $@).elf $(basename $@).hex

$(PATH_OBJ)/%.o: %.c
	@echo +++++ compile $< to $@
	@-$(CC) $(CFLAGS) $(C_INCLUDES) $(C_DEFINES) -c $< -o $@ 2> $(PATH_ERR)/$(basename $(@F)).err
	@-$(CAT) $(PATH_ERR)/$(basename $(@F)).err | $(SED) s:./../::
	# @-$(AWK) -f $(subst /,\,$(PATH_BUILD_MAKE)/gccerror.awk) $(PATH_ERR)/$(basename $(@F)).err

$(PATH_OBJ)/%.o: %.cpp
	@echo +++++ compile $< to $@
	@-$(CC) $(CFLAGS) $(C_INCLUDES) $(C_DEFINES) -c $< -o $@ 2> $(PATH_ERR)/$(basename $(@F)).err
	@-$(CAT) $(PATH_ERR)/$(basename $(@F)).err | $(SED) s:./../::
	# @-$(AWK) -f $(PATH_BUILD_MAKE)/gccerror.awk $(PATH_ERR)/$(basename $(@F)).err

# ---------------------------------------------------
# MSVC
# ---------------------------------------------------
else ifeq ($(ARG_COMPILER),msvc)

$(PATH_OBJ)/%.obj: %.c
	@echo +++++ compile $< to $@
	$(CC) $(CFLAGS) $(C_INCLUDES) $(C_DEFINES) -Fo"$@" -c $< 2> $(PATH_ERR)/$(basename $(@F)).err

$(PATH_OBJ)/%.obj: %.cc
	@echo +++++ compile $< to $@
	$(CC) $(CFLAGS) $(C_INCLUDES) $(C_DEFINES) -Fo"$@" -c $< 2> $(PATH_ERR)/$(basename $(@F)).err

$(PATH_OBJ)/%.obj: %.cpp
	@echo +++++ compile $< to $@
	$(CC) $(CFLAGS) $(C_INCLUDES) $(C_DEFINES) -Fo"$@" -c $< 2> $(PATH_ERR)/$(basename $(@F)).err

$(TARGET_FILENAME_BASE).exe: $(FILES_O)
	@echo +++++ linking $@ +++++
	$(CC) -Fe"$@" $(FILES_O) $(LFLAGS)

# ---------------------------------------------------
# GCC
# ---------------------------------------------------
else ifeq ($(ARG_COMPILER),gcc)

$(PATH_OBJ)/%.o: %.c
	@echo +++++ compile $< to $@
	@-$(CC) $(CFLAGS) $(C_INCLUDES) $(C_DEFINES) -c $< -o $@ 2> $(PATH_ERR)/$(basename $(@F)).err
	@-$(CAT) $(PATH_ERR)/$(basename $(@F)).err | $(SED) s:./../::

$(PATH_OBJ)/%.o: %.cc
	@echo +++++ compile $< to $@
	@-$(CC) $(CFLAGS) $(C_INCLUDES) $(C_DEFINES) -c $< -o $@ 2> $(PATH_ERR)/$(basename $(@F)).err
	@-$(CAT) $(PATH_ERR)/$(basename $(@F)).err | $(SED) s:./../::

$(PATH_OBJ)/%.o: %.cpp
	@echo +++++ compile $< to $@
	@-$(CC) $(CFLAGS) $(C_INCLUDES) $(C_DEFINES) -c $< -o $@ 2> $(PATH_ERR)/$(basename $(@F)).err
	@-$(CAT) $(PATH_ERR)/$(basename $(@F)).err | $(SED) s:./../::

$(TARGET_FILENAME_BASE).exe: $(FILES_O)
	@echo +++++ linking $@ +++++
	$(CC) $(FILES_O) $(LFLAGS) -o $(TARGET_FILENAME_BASE).exe

else

$(error ------ Invalid build command line parameter ARG_COMPILER $(ARG_COMPILER). Supported: avr_gcc,msvc,gcc) ------

endif